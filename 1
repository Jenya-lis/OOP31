using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace oop31
{
    public partial class Form1 : Form
    {
        private CircleContainer _circles; // Контейнер для хранения кругов
        private SelectionManager _selectionManager; // Контейнер выделенных кругов
        private bool _ctrlKeyPressed = false; // Флаг, указывающий, нажата ли клавиша Ctrl

        // Определение класса CCircle
        public class CCircle
        {
            public int X { get; set; } 
            public int Y { get; set; } 
            public int Radius { get; set; } 

            public CCircle(int x, int y, int radius = 50)
            {
                X = x;
                Y = y;
                Radius = radius;
            }
            //Метод для проверки, содержит ли круг заданную точку
            public bool ContainsPoint(Point point)
            {
                double dx = point.X - X;
                double dy = point.Y - Y;
                return dx * dx + dy * dy <= Radius * Radius;
            }
            // Метод для рисования круга
            public void Draw(Graphics g, Color color)
            {
                g.FillEllipse(new SolidBrush(color), X - Radius, Y - Radius, 2 * Radius, 2 * Radius);
                g.DrawEllipse(new Pen(Color.Black), X - Radius, Y - Radius, 2 * Radius, 2 * Radius);
            }
        }
        //Класс-контейнер для хранения кругов (список)
        public class CircleContainer
        {
            private List<CCircle> _circles; // Список кругов

            public CircleContainer(int capacity)  // Конструктор контейнера
            {
                _circles = new List<CCircle>(capacity);
            }

            public int Count
            {
                get { return _circles.Count; }
            }  // Свойство, возвращающее количество кругов в контейнере

            // Метод для добавления круга в контейнер
            public void Add(CCircle circle)
            {
                _circles.Add(circle);
            }
            // Метод для удаления круга из контейнера по индексу
            public void RemoveAt(int index)
            {
                if (index >= 0 && index < _circles.Count)
                {
                    _circles.RemoveAt(index);
                }
            }
            // Метод для получения круга из контейнера по индексу
            public CCircle GetObject(int index)
            {
                if (index >= 0 && index < _circles.Count)
                {
                    return _circles[index];
                }
                return null;
            }
        }
        //Класс-контейнер для хранения выделенных кругов (список)
        public class SelectionManager
        {
            private List<CCircle> _selectedCircles = new List<CCircle>(); // Список кругов

            public IReadOnlyCollection<CCircle> SelectedCircles
            {
                get { return _selectedCircles.AsReadOnly(); }
            }

            // Метод для добавления круга в выделенные.
            public void AddToSelection(CCircle circle)
            {
                if (!_selectedCircles.Contains(circle))
                {
                    _selectedCircles.Add(circle);
                }
            }

            // Метод для удаления круга из выделенных.
            public void RemoveFromSelection(CCircle circle)
            {
                _selectedCircles.Remove(circle);
            }

            // Метод для очистки всех выделенных кругов.
            public void ClearSelection()
            {
                _selectedCircles.Clear();
            }

            // Метод для проверки, выделен ли заданный круг.
            public bool IsSelected(CCircle circle)
            {
                return _selectedCircles.Contains(circle);
            }
        }

        // Конструктор класса Form1
        public Form1()
        {
            InitializeComponent();
            _circles = new CircleContainer(100); // Создаем контейнер для кругов с начальной емкостью 100
            _selectionManager = new SelectionManager(); 
            this.DoubleBuffered = true;
        }

   
        private void pictureBox1_Paint(object sender, PaintEventArgs e)
        {
            Graphics g = e.Graphics;

            // Рисуем все круги
            for (int i = 0; i < _circles.Count; i++)
            {
                CCircle circle = _circles.GetObject(i);
                if (circle != null)
                {
                    Color circleColor = Color.Black;

                    // Проверяем, выбран ли круг
                    if (_selectionManager.IsSelected(circle))
                    {
                        circleColor = Color.Red; // Измение цвета для выбранных кругов
                    }

                    circle.Draw(g, circleColor);
                }
            }
        }

        private void Form1_SizeChanged(object sender, EventArgs e)
        {
            pictureBox1.Invalidate(); // Перерисовываем pictureBox1 при изменении размера формы
        }

      
        private void Form1_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.ControlKey) // Если отпущена клавиша Ctrl
            {
                _ctrlKeyPressed = false; // Сбрасываем флаг, что клавиша Ctrl нажата
            }
        }

       
        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                // Удаляем круги из _circles
                foreach (CCircle circle in _selectionManager.SelectedCircles.ToList())
                {
                    for (int i = _circles.Count - 1; i >= 0; i--)
                    {
                        if (_circles.GetObject(i) == circle)
                        {
                            _circles.RemoveAt(i);
                        }
                    }
                }
                _selectionManager.ClearSelection(); // Удаляем выбранные из _selectedCircles
                pictureBox1.Invalidate();
            }
            else if (e.KeyCode == Keys.ControlKey) // Если нажата клавиша Ctrl
            {
                _ctrlKeyPressed = true; // Устанавливаем флаг, что клавиша Ctrl нажата
            }
        }

        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                List<CCircle> intersectedCircles = new List<CCircle>();

                // Поиск всех кругов, содержащих точку щелчка
                for (int i = 0; i < _circles.Count; i++)
                {
                    CCircle circle = _circles.GetObject(i);
                    if (circle != null && circle.ContainsPoint(e.Location))
                    {
                        intersectedCircles.Add(circle);
                    }
                }

                if (intersectedCircles.Count > 0)
                {
                    if (_ctrlKeyPressed)
                    {
                        // Ctrl нажата: переключить выделение для всех пересекающихся кругов
                        foreach (CCircle circle in intersectedCircles)
                        {
                            if (_selectionManager.IsSelected(circle))
                            {
                                _selectionManager.RemoveFromSelection(circle);
                            }
                            else
                            {
                                _selectionManager.AddToSelection(circle);
                            }
                        }
                    }
                    else
                    {
                        // Ctrl не нажата: снять выделение со всего, выделить только пересекающиеся
                        _selectionManager.ClearSelection();
                        foreach (CCircle circle in intersectedCircles)
                        {
                            _selectionManager.AddToSelection(circle);
                        }
                    }
                }
                else
                {
                    // Клик вне круга: создать новый круг и снять выделение
                    _circles.Add(new CCircle(e.X, e.Y));
                    _selectionManager.ClearSelection();
                }

                pictureBox1.Invalidate(); // Обновить отображение
            }
        }
    }
}
